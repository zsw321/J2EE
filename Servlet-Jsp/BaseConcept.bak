1.生命周期
  容器控制着servlet的一生，创建请求、响应对象，为servlet创建线程或分配一个线程，调用servlet的service方法，并传递请求和响应
对象的引用作为参数。。。。。。
  容器启动时，会寻找已经部署的Web应用，开始搜索servlet类文件（第一步），此时servlet的生命开始，然后可能加载类或第一个客户
使用时进行，反正在servlet没有完全初始化之前绝对不会调用service方法。

Web容器加载Servlet类 --> 初始化servlet（构造函数运行，此时仅仅是对象）--> 调用Init()--> 调用service()函数处理客户请求
    --> destroy()销毁 

2.属性及监听者

>>Servlet初始化参数
  容器初始化一个Servlet时，会创建对应的ServletConfig，并从DD读取Servlet初始化参数，交给ServletConfig，并
传递给Servlet的Init()方法。===》Servlet初始化参数只能读一次（交给ServletConfig），即容器初始化Servlet时。
    在DD文件中
    <servlet>
	<init-param>
		<param-name>XXX</param-name>
		<param-value>XXX-value</param-value>
	</init-param>
    </servlet>

    ServletConfig :  getInitParameter(String);
		     Enumeration getInitParameterNames();
		     getServletContext();

>>上下文初始化参数
    针对整个Web应用，不是单个servlet，即所有的servlet及Jsp都可以访问。
    在DD文件中
    <servlet>
	.....
    </servlet>
    <context-param>
	<param-name>XXX</param-name>
	<param-value>XXX-value</param-value>
    </context-param>

    getServletContext().String getInitParameter(String);
		       .Enumeration getInitParameterNames();
		       .Object getAttribute(String);
		       .getAttributeNames();
		       .Enumeration setAttribute(String, Object);
		       .removeAttribute(String);

    相对于Servlet初始化参数，上下文初始化参数针对Web的所有的servlet及Jsp都可以访问，不过前者也可以通过保存
在一个属性中来得到更大范围的可用性。
     ==> 每个Servlet都有一个ServletConfig，每个Web应用都有一个ServletContext。

>>监听
    在生命周期的重要时刻，总会有一个监听者在监听，如上下文监听事件：在上下文初始化（应用正在得到部署）和
上下文撤销（应用取消部署或结束）时通知，对应的接口 javax.servlet.ServletContextListener。
    还可以监听上下文属性、servlet请求和属性，及Http会话和会话属性相关的事件。
  
>>属性
    是个对象，多涉及ServletContext、HttpServletRequest、HttpSession。简单认为是映射实例对象的名/值对（name/Object），

    三个作用域：上下文、会话、请求，
	    .Object getAttribute(String);
	    .getAttributeNames();
	    .Enumeration setAttribute(String, Object);
	    .removeAttribute(String);
    上下文作用域不是线程安全的，因为应用的每部分都可以访问上下文属性，
	==》多个Servlet ==》多个线程 （同个Servlet实例也可对应多个Servlet）
    会话作用域也不是线程安全的，因为同一个客户多个浏览器窗口请求属于同一个会话。
    只有请求属性和局部变量才是线程安全的。

3.会话管理

    HttpSession对象可以保存跨同一个客户多个请求的会话状态，即会话期间客户做的所有请求，从中得到的所有信息
都可以用HttpSession对象保存。
    > 通过会话ID实现：对于客户的第一个请求，容器会生成一个唯一的会话ID，并通过响应返回给客户，客户在后续
      每个请求中都会带上该会话ID，容器看到ID后，会找到对应的会话，并将会话与请求相关联。
    >容器和客户通过Cookie交换这个会话ID，容器几乎会做Cookie所有的工作。

    HttpSession session = request.getSession();
    会获得一个会话，若客户用这个会话ID做过响应，则返回原先的会话ID，否则返回新的会话对象。

    ？当你的浏览器不支持Cookie时，会忽略Set-Cookie响应首部，此时容器与客户如何交换会话ID？？
    > URL重写：通过将会话ID附加到访问应用的各个URL的最后，容器会将请求URL中的这个额外部分，查找匹配会话。
    response.encodeURL("/test.do")。
    想要使用URL重写，页面须动态生成，URL重写是自动的，只有当你对URL完成编码才行，须通过响应对象的一个方法
 （encodeURL()或encodeRedirectURL()）来运行所有的URL，其他的事情由容器完成。

>>HttpSession接口
    invalidate()，结束会话，当前存储在这个会话中的所有会话属性会解除绑定，会话ID不存在。
    ......

>>Cookie除了帮助支持会话，还可以用于在客户和服务器之间交换数据（一个名/值String对）
    服务器通过把Cookie发送给客户，客户做出下一个请求时，再把Cookie返回，不必用户介入。
 可以通过Servlet API访问，HttpServletRequest、HttpServletResponse 和 Cookie。
	 //创建一个新的Cookie
	 Cookie cookie = new Cookie("username", name);

	 //设置cookie的存活时间
	 cookie.setMaxAge(30×60);

	 //把cookie发送给客户
	 response.addCookie(cookie);

	 //从请求中得到Cookie
	 Cookie[] cookies = request.getCookies();
	 for(int i=0; i<cookies.length; i++){
	      Cookie ck = cookies[i];
	      if(ck.getName().equals("username")){
	           String usrname = ck.getValue();
		   out.println("Hello" + username);
		   break;
	      }
	 }

4.JSP
      最终会变成一个完整的servlet运行，且该servlet类由容器编写。
      >1. 转换为servlet类源码（.java）；
      >2.编译为Java Servlet类（.class）；
      >3.加载，实例化，初始化，为请求建立线程，调用service方法。
    部署应用时，在JSP生命周期中，转换和编译只进行一次，其他同servlet。

    -- 指令：page、include、taglib	    <%@  %>
    -- scriptlet： 常规的Java代码	    <%   %>
    -- 表达式：省略了out.print              <%=  %>
    -- JSP声明：声明所生成servlet类的成员   <%!  %>
 
    JSP注释 <%--  --%>
	
    JSP转换为Servlet源码时，所有的scriptlet和表达式代码都在服务方法中，即scriptlet中声明的变量为局部变量。
    建立服务方法 _jspService()：由servlet超类覆盖的service()方法调用，
    接收HttpServletRequest、HttpServletResponse参数，容器声明并初始化所有隐式对象。

>隐式对象(API)
	1.out(JspWriter)、
	2.request(HttpServletRequest)、
	3.response(HttpServletResponse)、
	4.session(HttpSession)、
	5.application(ServletContext)、
	6.config(ServletConfig)、
	7.pageContext(PageContext)、  页面级作用域
	8.exception(Throwable)、
	9.page(Object)




